#!/usr/bin/env ruby

require "socket"

class Carbon
  def initialize(host='localhost', port=2003)
    @carbon = TCPSocket.new(host, port)
  end
  
  def send(msg)
    @carbon.puts(msg)
  end
  
  def close
    @carbon.close
  end
end

def convert_integers(values)
  values.each_with_index do |value, index|
    begin
      converted = Integer(value)
      values[index] = converted
    rescue ArgumentError
    end
  end
  values
end

result = convert_integers(`vmstat`.split("\n")[2].split(" "))

metrics = {
  :procs => {
     :waiting => result[0],
     :uninterruptible => result[1]
   },
   :memory => {
     :swap_used => result[2],
     :free => result[3],
     :inactive => result[4],
     :active => result[5]
   },
   :swap => {
     :in => result[6],
     :out => result[7]
   },
   :io => {
     :received => result[8],
     :sent => result[9]
   },
   :system => {
     :interrupts_per_second => result[10],
     :context_switches_per_second => result[11]
   },
   :cpu => {
     :user => result[12],
     :system => result[13],
     :idle => result[14],
     :waiting => result[15]
  }
}

carbon = Carbon.new()
metrics.each do |parent, children|
  children.each do |child, value|
    carbon.send("#{parent}.#{child} #{value} #{Time.now.to_i}")
    #puts "#{parent}.#{child} #{value} #{Time.now.to_i}"
  end
end
